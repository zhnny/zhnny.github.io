<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git命令手册</title>
    <url>/2022/03/09/Git%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h2 id="1-版本回退"><a href="#1-版本回退" class="headerlink" title="1. 版本回退"></a>1. 版本回退</h2><p>笔者文件经过两次修改，可以通过<code>git log</code>查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log</span><br><span class="line">commit 5e3f973bf0248775995e6197cb999c874abc3859</span><br><span class="line">Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Date:   Tue Mar 1 18:17:58 2022 +0800</span><br><span class="line"></span><br><span class="line">    second commit</span><br><span class="line"></span><br><span class="line">commit 196ad7fafa50d6558e2c4da42344e7ff292d1447</span><br><span class="line">Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Date:   Tue Mar 1 18:15:54 2022 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log --pretty=oneline</span><br><span class="line">5e3f973bf0248775995e6197cb999c874abc3859 second commit</span><br><span class="line">196ad7fafa50d6558e2c4da42344e7ff292d1447 first commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：类似于<code>5e3f...</code>这一大串数字是<code>commit id </code>，是一个SHA1计算出来的一个非常大的数字，用十六进制表示，用来唯一辨识每个版本</p>
<p>Git中，用<code>HEAD</code>表示当前版本，上一个版本是<code>HEAD^</code>，上上个版本是<code>HEAD^^</code>，如果数量过多，可用<code>HEAD^n</code>表示，n表示一个数字。</p>
<p>回退上一个版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git reset --hard HEAD^</span><br><span class="line">HEAD is now at 196ad7f first commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>–hard</strong> 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</li>
</ul>
<p>此时<code>Git log</code>中已经没有后来那次版本的信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log --pretty=oneline</span><br><span class="line">196ad7fafa50d6558e2c4da42344e7ff292d1447 first commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以使用<code>git reflog</code>查看操作记录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git reflog</span><br><span class="line">196ad7f HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">5e3f973 HEAD@&#123;1&#125;: commit: second commit</span><br><span class="line">196ad7f HEAD@&#123;2&#125;: commit (initial): first commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以查看到第二次提交的commit id，从而再次变更为第二次版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git reset --hard 5e3f973</span><br><span class="line">HEAD is now at 5e3f973 second commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-工作区与暂存区"><a href="#2-工作区与暂存区" class="headerlink" title="2. 工作区与暂存区"></a>2. 工作区与暂存区</h2><p>文件所在地方为工作区，当文件被修改后，用<code>git status</code>查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       modified:   README.md</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>显示文件已被修改但是没有add和commit</p>
<p>add文件后，文件来到暂存区，用<code>git status</code>查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Changes to be committed:</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       modified:   README.md</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/01/EYoZUWvz8tfis1N.jpg" alt="git-stage"></p>
<p>显示文件没有commit</p>
<p>commit文件后，文件来到版本库，用<code>git status</code>查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/01/6MscyI19UOJrzuv.jpg" alt="git-stage-after-commit"></p>
<h2 id="3-管理修改"><a href="#3-管理修改" class="headerlink" title="3.管理修改"></a>3.管理修改</h2><p>Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件</p>
<p>修改文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# echo &quot;This is a new line&quot; &gt;&gt; README.md</span><br></pre></td></tr></table></figure>

<p>查看修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This is third commit</span><br><span class="line">This is a new line</span><br></pre></td></tr></table></figure>

<p>添加到暂存区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git add README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Changes to be committed:</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       modified:   README.md</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br></pre></td></tr></table></figure>

<p>再次修改文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This is third commit</span><br></pre></td></tr></table></figure>

<p>此时我们提交修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git commit -m &quot;Add a new line&quot;</span><br><span class="line">[master 6e2db9d] Add a new line</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到提交的是插入了一行，也就是上一次修改</p>
<p>我们看一下文件状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       modified:   README.md</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">vi</span></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<p>可以看到工作区的修改存在且未添加到暂存区</p>
<p>所以，Git管理的是修改，当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交</p>
<p>提交后，用<code>git diff HEAD -- readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git diff HEAD  README.md</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index 28bc83d..62c3f45 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -1,2 +1 @@</span><br><span class="line"> This is third commit</span><br><span class="line">-This is a new line</span><br></pre></td></tr></table></figure>

<p>可见，第二次修改确实没有被提交</p>
<h2 id="4-撤销修改"><a href="#4-撤销修改" class="headerlink" title="4.撤销修改"></a>4.撤销修改</h2><h3 id="4-1-修改但未提交"><a href="#4-1-修改但未提交" class="headerlink" title="4.1.修改但未提交"></a>4.1.修改但未提交</h3><p>错误的修改文件但未提交:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# echo &quot;This is an error&quot; &gt;&gt; README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This git test file</span><br><span class="line">This is an error</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用<code>git status</code>查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       modified:   README.md</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Git提示可以<code>use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory</code>，即使用<code>git checkout -- &lt;file&gt;</code>来丢弃修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout -- README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This git test file</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：<code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令</li>
</ul>
<p>可见修改被丢弃</p>
<h3 id="4-2-修改已添加到暂存区"><a href="#4-2-修改已添加到暂存区" class="headerlink" title="4.2.修改已添加到暂存区"></a>4.2.修改已添加到暂存区</h3><p>如果已经添加到暂存区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This git test file</span><br><span class="line">This is an error</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git add README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Changes to be committed:</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       modified:   README.md</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br></pre></td></tr></table></figure>

<p>Git提示<code>use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage</code>，即使用<code>git reset HEAD &lt;file&gt;</code>来丢弃存储区修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git reset HEAD README.md</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       README.md</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       modified:   README.md</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span></span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This git test file</span><br><span class="line">This is an error</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可见暂存区的修改被撤销了，工作区文件的修改还存在，这时候再使用<code>git checkout -- &lt;file&gt;</code>来丢弃修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout -- README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This git test file</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-3-修改已提交"><a href="#4-3-修改已提交" class="headerlink" title="4.3.修改已提交"></a>4.3.修改已提交</h3><p>回退上一个版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git reset --hard HEAD^</span><br><span class="line">HEAD is now at 196ad7f first commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-删除文件"><a href="#5-删除文件" class="headerlink" title="5.删除文件"></a>5.删除文件</h2><p>删除工作区文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# rm -rf test.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       deleted:    test.txt</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Git知道我们删除了文件并提示<code>use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed</code>，即我们可以使用<code>git add &lt;file&gt;</code>或者<code>git rm &lt;file&gt;</code>来删除版本库中的文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git rm test.txt</span><br><span class="line">rm &#x27;test.txt&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后再commit：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git commit -m &quot;Delete a file&quot;</span><br><span class="line">[master af52d1c] Delete a dile</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果文件只是添加到暂存区但是我们现在需要删除呢？撤销修改即可，使用<code>git reset HEAD &lt;file&gt;</code></p>
<ul>
<li>注意：先手动删除文件，然后使用<code>git rm &lt;file&gt;</code>和<code>git add&lt;file&gt;</code>效果是一样的</li>
<li>文件误删了可以使用版本库来撤销修改</li>
</ul>
<h2 id="6-创建与合并分支"><a href="#6-创建与合并分支" class="headerlink" title="6.创建与合并分支"></a>6.创建与合并分支</h2><p>查看分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git branch</span><br><span class="line">* master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：*表示当前工作分区</li>
</ul>
<p>创建分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git branch dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个时候我们在查看一下分支的情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>切换分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout dev</span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：在新版本的Git中可使用switch来切换</p>
</li>
<li><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>
</li>
</ul>
<p>合并某分支到当前分支(dev分支已经做了修改并且切换当前工作分支为master)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git merge dev</span><br><span class="line">Updating e9442cf..4dfabbc</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> dev.txt   | 1 +</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 dev.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：此处dev分支和master分支不存在冲突</li>
</ul>
<p>删除分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git branch -d dev</span><br><span class="line">Deleted branch dev (was 4dfabbc).</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-解决冲突"><a href="#7-解决冲突" class="headerlink" title="7.解决冲突"></a>7.解决冲突</h2><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p>
<p>此处先模拟一个冲突（创建一个分支并在两个分支做一个无法快速合并的提交，即存在冲突）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout -b feature</span><br><span class="line">Switched to a new branch &#x27;feature&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# ls</span><br><span class="line">dev.txt  README.md  test.txt</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# echo &quot;This is feature line&quot; &gt;&gt; README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git add README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git commit -m &quot;Add a line in feature branch&quot;</span><br><span class="line">[feature 4ecad70] Add a line in feature branch</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# echo &quot;This is master line&quot; &gt;&gt; README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git add README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git commit -m &quot;Add a line in master branch&quot;</span><br><span class="line">[master 9a22c75] Add a line in master branch</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们尝试合并：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git merge feature</span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict in README.md</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发生冲突，无法自动合并</p>
<p>此时我们查看状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git status</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">You have unmerged paths.</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (fix conflicts and run <span class="string">&quot;git commit&quot;</span>)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Unmerged paths:</span></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       both modified:      README.md</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也提示存在冲突，并且提示<code>fix conflicts and run &quot;git commit&quot;</code>，即修改文件后使用<code>git commit</code>来解决冲突</p>
<p>我们查看文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This git test file</span><br><span class="line">This is dev line</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">This is master line</span><br><span class="line">=======</span><br><span class="line">This is feature line</span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt; feature</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This git test file</span><br><span class="line">This is dev line</span><br><span class="line">This is master and feature line</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>提交修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git add README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git commit -m &quot;conflict fixed&quot;</span><br><span class="line">[master e52bbb2] conflict fixed</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到冲突解决了</p>
<p>用带参数的<code>git log</code>可以看到分支的合并情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   e52bbb2 conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * 4ecad70 Add a line in feature branch</span><br><span class="line">* | 9a22c75 Add a line in master branch</span><br><span class="line">|/</span><br><span class="line">* 4dfabbc dev branch first commit</span><br><span class="line">* e9442cf Add test.txt</span><br><span class="line">* c2f0b57 Modified a file</span><br><span class="line">* 6e2db9d Add a new line</span><br><span class="line">* 061be34 third commit</span><br><span class="line">* 5e3f973 second commit</span><br><span class="line">* 196ad7f first commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其图示意思大致如下：</p>
<p><img src="https://s2.loli.net/2022/03/08/hJgzldVL5qxnYoe.png" alt="image-20220308111031068"></p>
<h2 id="8-分支策略"><a href="#8-分支策略" class="headerlink" title="8.分支策略"></a>8.分支策略</h2><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息</p>
<p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息</p>
<p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并</p>
<p>以下是测试：</p>
<p>Fast-forward（默认）模式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout -b dev</span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# echo &quot;This is a new line&quot; &gt;&gt;dev.txt</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git add dev.txt</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git commit -m &quot;Add a line in dev.txt&quot;</span><br><span class="line">[dev 9f34d0d] Add a line in dev.txt</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git merge dev</span><br><span class="line">Updating e52bbb2..9f34d0d</span><br><span class="line">Fast-forward</span><br><span class="line"> dev.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log</span><br><span class="line">commit 9f34d0def7a71384b3528f9a1056fa1badc9d0c2</span><br><span class="line">Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Date:   Tue Mar 8 11:58:56 2022 +0800</span><br><span class="line"></span><br><span class="line">    Add a line in dev.txt</span><br><span class="line"></span><br><span class="line">commit e52bbb2ec0fd79188b47060ebe5ee515c14ac557</span><br><span class="line">Merge: 9a22c75 4ecad70</span><br><span class="line">Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Date:   Tue Mar 8 11:06:11 2022 +0800</span><br><span class="line"></span><br><span class="line">    conflict fixed</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>普通模式（–no-ff）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout -b dev</span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# echo &quot;This is second new line&quot; &gt;&gt;dev.txt</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git add dev.txt</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git commit -m &quot;Add a line in dev.txt&quot;</span><br><span class="line">[dev 1e70bdc] Add a line in dev.txt</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git merge dev --no-ff</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> dev.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   afca374 Merge branch &#x27;dev&#x27;</span><br><span class="line">|\</span><br><span class="line">| * 1e70bdc Add a line in dev.txt</span><br><span class="line">|/</span><br><span class="line">* 9f34d0d Add a line in dev.txt</span><br><span class="line">*   e52bbb2 conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * 4ecad70 Add a line in feature branch</span><br><span class="line">* | 9a22c75 Add a line in master branch</span><br><span class="line">|/</span><br><span class="line">* 4dfabbc dev branch first commit</span><br><span class="line">* e9442cf Add test.txt</span><br><span class="line">* c2f0b57 Modified a file</span><br><span class="line">* 6e2db9d Add a new line</span><br><span class="line">* 061be34 third commit</span><br><span class="line">* 5e3f973 second commit</span><br><span class="line">* 196ad7f first commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-BUG分支"><a href="#9-BUG分支" class="headerlink" title="9.BUG分支"></a>9.BUG分支</h2><p>你正在dev分支上开发你的代码，但是临时接到一个BUG修改任务，我们需要先存储现在的未完成的工作区内容，再创建一个BUG修复分支，修复完成后merge到master，并且由于dev分支也有这个BUG，需要也将这个修复复制到dev分支</p>
<p>存储工作区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git stash</span><br><span class="line">Saved working directory and index state WIP on dev: afca374 Merge branch &#x27;dev&#x27;</span><br><span class="line">HEAD is now at afca374 Merge branch &#x27;dev&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>切换到master分支并且创建BUG修复分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout -b bug-fixed</span><br><span class="line">Switched to a new branch &#x27;bug-fixed&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修复BUG并提交和merge：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# echo &quot;fix bug&quot; &gt;&gt; README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git add README.md</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git commit -m &quot;bug fixed&quot;</span><br><span class="line">[bug-fixed b5abcdd] bug fixed</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git merge bug-fixed</span><br><span class="line">Updating afca374..b5abcdd</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们查看master分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This git test file</span><br><span class="line">This is dev line</span><br><span class="line">This is master and feature line</span><br><span class="line">fix bug</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到BUG在master上已经修复</p>
<p>可是dev分支呢？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout dev</span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This git test file</span><br><span class="line">This is dev line</span><br><span class="line">This is master and feature line</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dev上的BUG可没修复</p>
<p>将master上的BUG修复复制到dev上：</p>
<ul>
<li>获得修复的版本的<code>commit id</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log --graph</span><br><span class="line">* commit b5abcdd2cb9294a98874cd3ab78a212566728dec</span><br><span class="line">| Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">| Date:   Tue Mar 8 12:47:40 2022 +0800</span><br><span class="line">|</span><br><span class="line">|     bug fixed</span><br><span class="line">|</span><br><span class="line">*   commit afca374ed3030782154c0b289378286111006643</span><br><span class="line">|\  Merge: 9f34d0d 1e70bdc</span><br><span class="line">| | Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">| | Date:   Tue Mar 8 12:24:00 2022 +0800</span><br><span class="line">| |</span><br><span class="line">| |     Merge branch &#x27;dev&#x27;</span><br><span class="line">| |</span><br><span class="line">| * commit 1e70bdc1dee854f049b18e11e0b0971c30fc34e6</span><br><span class="line">|/  Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">|   Date:   Tue Mar 8 12:23:09 2022 +0800</span><br><span class="line">|</span><br><span class="line">|       Add a line in dev.txt</span><br><span class="line">|</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>复制修复到dev：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout dev</span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git cherry-pick b5abcdd</span><br><span class="line">[dev 7429c57] bug fixed</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# cat README.md</span><br><span class="line">This git test file</span><br><span class="line">This is dev line</span><br><span class="line">This is master and feature line</span><br><span class="line">fix bug</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log --graph</span><br><span class="line">* commit 7429c57090cf3a146ec6f64ff60658922e08b235</span><br><span class="line">| Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">| Date:   Tue Mar 8 12:47:40 2022 +0800</span><br><span class="line">|</span><br><span class="line">|     bug fixed</span><br><span class="line">|</span><br><span class="line">*   commit afca374ed3030782154c0b289378286111006643</span><br><span class="line">|\  Merge: 9f34d0d 1e70bdc</span><br><span class="line">| | Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">| | Date:   Tue Mar 8 12:24:00 2022 +0800</span><br><span class="line">| |</span><br><span class="line">| |     Merge branch &#x27;dev&#x27;</span><br><span class="line">| |</span><br><span class="line">| * commit 1e70bdc1dee854f049b18e11e0b0971c30fc34e6</span><br><span class="line">|/  Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">|   Date:   Tue Mar 8 12:23:09 2022 +0800</span><br><span class="line">|</span><br><span class="line">|       Add a line in dev.txt</span><br><span class="line">|</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到dev上的BUG确实修复了并且在dev上有了一次新的commit</p>
<p>最后，恢复工作区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git stash pop</span><br><span class="line"><span class="meta"># </span><span class="language-bash">On branch dev</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#       modified:   dev.txt</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (18f91d7c6f57e8b4b58d6172419a814a61b0d07e)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>恢复的方法有两种：</p>
<ul>
<li>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除</li>
<li>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了</li>
</ul>
<h2 id="10-feature分支"><a href="#10-feature分支" class="headerlink" title="10.feature分支"></a>10.feature分支</h2><p>开发一个新feature，最好新建一个分支</p>
<p>顺利的话，开发完成后merge一下就好</p>
<p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git branch  -d dev</span><br><span class="line">error: The branch &#x27;dev&#x27; is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run &#x27;git branch -D dev&#x27;.</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git branch  -D dev</span><br><span class="line">Deleted branch dev (was 7429c57).</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="11-多人协作"><a href="#11-多人协作" class="headerlink" title="11.多人协作"></a>11.多人协作</h2><p>查看远程仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git remote -v</span><br><span class="line">origin  git@github.com:zhnny/git-learn.git (fetch)</span><br><span class="line">origin  git@github.com:zhnny/git-learn.git (push)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="11-1-推送分支"><a href="#11-1-推送分支" class="headerlink" title="11.1.推送分支"></a>11.1.推送分支</h3><p>推送master分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git push origin master</span><br><span class="line">Everything up-to-date</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>推送dev分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git push origin dev</span><br><span class="line">Counting objects: 5, done.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 360 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote:</span><br><span class="line">remote: Create a pull request for &#x27;dev&#x27; on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/zhnny/git-learn/pull/new/dev</span><br><span class="line">remote:</span><br><span class="line">To git@github.com:zhnny/git-learn.git</span><br><span class="line"> * [new branch]      dev -&gt; dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="11-2-抓取分支"><a href="#11-2-抓取分支" class="headerlink" title="11.2.抓取分支"></a>11.2.抓取分支</h3><p>克隆远端仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 clone]# git clone git@github.com:zhnny/git-learn.git</span><br><span class="line">Cloning into &#x27;git-learn&#x27;...</span><br><span class="line">remote: Enumerating objects: 44, done.</span><br><span class="line">remote: Counting objects: 100% (44/44), done.</span><br><span class="line">remote: Compressing objects: 100% (27/27), done.</span><br><span class="line">remote: Total 44 (delta 4), reused 43 (delta 3), pack-reused 0</span><br><span class="line">Receiving objects: 100% (44/44), 4.02 KiB | 0 bytes/s, done.</span><br><span class="line">Resolving deltas: 100% (4/4), done.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>默认情况下只有master分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git branch</span><br><span class="line">* master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>抓取dev分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git checkout -b dev origin/dev</span><br><span class="line">Branch dev set up to track remote branch dev from origin.</span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="11-3-处理冲突"><a href="#11-3-处理冲突" class="headerlink" title="11.3.处理冲突"></a>11.3.处理冲突</h3><p>一个人修改了dev并推送：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# echo &quot;This is a new line&quot; &gt;&gt; dev.txt</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git add dev.txt</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git commit -m &quot;Add a line&quot;</span><br><span class="line">[dev 29f398e] Add a line</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git push origin dev</span><br><span class="line">Counting objects: 5, done.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 338 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</span><br><span class="line">To git@github.com:zhnny/git-learn.git</span><br><span class="line">   a7ae8d2..29f398e  dev -&gt; dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>另一个人修改了dev并推送：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# echo &quot;This is a new line&quot; &gt;&gt; dev.txt</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git add dev.txt</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git commit -m &quot;Add a line&quot;</span><br><span class="line">[dev 2a494fc] Add a line</span><br><span class="line"> Committer: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Your name and email address were configured automatically based</span><br><span class="line">on your username and hostname. Please check that they are accurate.</span><br><span class="line">You can suppress this message by setting them explicitly:</span><br><span class="line"></span><br><span class="line">    git config --global user.name &quot;Your Name&quot;</span><br><span class="line">    git config --global user.email you@example.com</span><br><span class="line"></span><br><span class="line">After doing this, you may fix the identity used for this commit with:</span><br><span class="line"></span><br><span class="line">    git commit --amend --reset-author</span><br><span class="line"></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git push origin dev</span><br><span class="line">To git@github.com:zhnny/git-learn.git</span><br><span class="line"> ! [rejected]        dev -&gt; dev (fetch first)</span><br><span class="line">error: failed to push some refs to &#x27;git@github.com:zhnny/git-learn.git&#x27;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first merge the remote changes (e.g.,</span><br><span class="line">hint: &#x27;git pull&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到后面这个push失败，Git提示我们先pull下来，merge后再推送</p>
<p>pull远程仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git pull</span><br><span class="line">remote: Enumerating objects: 5, done.</span><br><span class="line">remote: Counting objects: 100% (5/5), done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From github.com:zhnny/git-learn</span><br><span class="line">   a7ae8d2..29f398e  dev        -&gt; origin/dev</span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code></li>
</ul>
<p>建立链接关系：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git branch --set-upstream-to=origin/dev dev</span><br><span class="line">Branch dev set up to track remote branch dev from origin.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再次pull：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git pull</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>merge后再次push：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git push origin dev</span><br><span class="line">Counting objects: 2, done.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (2/2), 353 bytes | 0 bytes/s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1/1), done.</span><br><span class="line">To git@github.com:zhnny/git-learn.git</span><br><span class="line">   29f398e..3eda6cf  dev -&gt; dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="12-Rebase操作"><a href="#12-Rebase操作" class="headerlink" title="12.Rebase操作"></a>12.Rebase操作</h2><p>rebase操作：</p>
<ul>
<li><p>rebase操作可以把本地未push的分叉提交历史整理成直线</p>
</li>
<li><p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比</p>
</li>
</ul>
<p>rebase前：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log --graph --pretty=oneline</span><br><span class="line">*   b3c1899f42d1364eee047c3ec22ffb7b18912d67 merge conflict</span><br><span class="line">|\</span><br><span class="line">| * 7d9e9e2375785c7d594da445823bc2ceffcb2137 Add a new line</span><br><span class="line">| * 1ed7903f52d52ce675bdedeb29b41f8648aaefbc Add a new line</span><br><span class="line">| * 3bc7183e800263d908d1b7701c9b15860e58beca Add a new line</span><br><span class="line">| *   905a799a93d51d11a588e2493bdc23765b9b3fde merge confict</span><br><span class="line">| |\</span><br><span class="line">| * | aa43bf9c412070c05227e475a5c1f7d633f208c1 Add the fifth line</span><br><span class="line">* | | 6fd7b915a404dbea8dea256c4f5f6e8e4376e9f5 Add a new line</span><br><span class="line">| |/</span><br><span class="line">|/|</span><br><span class="line">* | cda61afd2f6b2c7dcad3db5abe8e1f8304354fbe Add the forth line</span><br><span class="line">* | 44e789020405f50780964136663edd4701bb39d7 Add the third line</span><br><span class="line">|/</span><br><span class="line">* 74a80dc3c466574717ccfffbf341609259e111a6 Add the second new line</span><br><span class="line">* e85a234700ebf67aa23434d9bde59b18845eadee Add a new line</span><br><span class="line">* 1a20b8eba002fcd70bbb6ca039dc41fe66ab1d81 Add a line</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>rebase：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git rebase</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: Add a new line</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">M       dev.txt</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging dev.txt</span><br><span class="line">CONFLICT (content): Merge conflict in dev.txt</span><br><span class="line">Failed to merge in the changes.</span><br><span class="line">Patch failed at 0001 Add a new line</span><br><span class="line">The copy of the patch that failed is found in:</span><br><span class="line">   /root/clone/git-learn/.git/rebase-apply/patch</span><br><span class="line"></span><br><span class="line">When you have resolved this problem, run &quot;git rebase --continue&quot;.</span><br><span class="line">If you prefer to skip this patch, run &quot;git rebase --skip&quot; instead.</span><br><span class="line">To check out the original branch and stop rebasing, run &quot;git rebase --abort&quot;.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<code>rebase</code>的过程中，也许会出现冲突(conflict)。在这种情况，Git会停止<code>rebase</code>并会让你去解决冲突；在解决完冲突后，用”<code>git add</code>“命令去更新这些内容的索引(index), 然后，你无需执行 <code>git commit</code>,只要执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git rebase --continue</span><br><span class="line">Applying: Add a new line</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>rebase后：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log --graph --pretty=oneline</span><br><span class="line">* 9119f8fb6a62595fa70456132aa7329aee9630e0 Add a new line</span><br><span class="line">* 7d9e9e2375785c7d594da445823bc2ceffcb2137 Add a new line</span><br><span class="line">* 1ed7903f52d52ce675bdedeb29b41f8648aaefbc Add a new line</span><br><span class="line">* 3bc7183e800263d908d1b7701c9b15860e58beca Add a new line</span><br><span class="line">*   905a799a93d51d11a588e2493bdc23765b9b3fde merge confict</span><br><span class="line">|\</span><br><span class="line">| * cda61afd2f6b2c7dcad3db5abe8e1f8304354fbe Add the forth line</span><br><span class="line">| * 44e789020405f50780964136663edd4701bb39d7 Add the third line</span><br><span class="line">* | aa43bf9c412070c05227e475a5c1f7d633f208c1 Add the fifth line</span><br><span class="line">|/</span><br><span class="line">* 74a80dc3c466574717ccfffbf341609259e111a6 Add the second new line</span><br><span class="line">* e85a234700ebf67aa23434d9bde59b18845eadee Add a new line</span><br><span class="line">* 1a20b8eba002fcd70bbb6ca039dc41fe66ab1d81 Add a line</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在任何时候，可以用<code>--abort</code>参数来终止<code>rebase</code>的操作，并且 分支会回到<code>rebase</code>开始前的状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git rebase --abort</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="13-创建标签"><a href="#13-创建标签" class="headerlink" title="13.创建标签"></a>13.创建标签</h2><p>创建标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git tag v1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git tag</span><br><span class="line">v1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打之前commit的标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git log --graph --pretty=oneline</span><br><span class="line">* b5abcdd2cb9294a98874cd3ab78a212566728dec bug fixed</span><br><span class="line">*   afca374ed3030782154c0b289378286111006643 Merge branch &#x27;dev&#x27;</span><br><span class="line">|\</span><br><span class="line">| * 1e70bdc1dee854f049b18e11e0b0971c30fc34e6 Add a line in dev.txt</span><br><span class="line">|/</span><br><span class="line">* 9f34d0def7a71384b3528f9a1056fa1badc9d0c2 Add a line in dev.txt</span><br><span class="line">*   e52bbb2ec0fd79188b47060ebe5ee515c14ac557 conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * 4ecad70e9719d9d5d2e95ca1ef2fc12c7016b4b4 Add a line in feature branch</span><br><span class="line">* | 9a22c75daf397a63a8598094e209f078e0a8a1f7 Add a line in master branch</span><br><span class="line">|/</span><br><span class="line">* 4dfabbce1de291335759960028913e31491ccfce dev branch first commit</span><br><span class="line">* e9442cfef62eada2943e45ac4c2782f2bc54b9b4 Add test.txt</span><br><span class="line">* c2f0b571b6b84becc27440e6670b69b0a9b035a7 Modified a file</span><br><span class="line">* 6e2db9d63f9984e2233a6c3c972b00489f315074 Add a new line</span><br><span class="line">* 061be34209d57299ffe96616f82008ee4655eea0 third commit</span><br><span class="line">* 5e3f973bf0248775995e6197cb999c874abc3859 second commit</span><br><span class="line">* 196ad7fafa50d6558e2c4da42344e7ff292d1447 first commit</span><br><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git tag v0.9 afca</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再次查看标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git tag</span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>注意，标签不是按时间顺序列出，而是按字母排序的</li>
</ul>
<p>可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git show v0.9</span><br><span class="line">commit afca374ed3030782154c0b289378286111006643</span><br><span class="line">Merge: 9f34d0d 1e70bdc</span><br><span class="line">Author: root &lt;root@LAPTOP-1UJN7PP7.localdomain&gt;</span><br><span class="line">Date:   Tue Mar 8 12:24:00 2022 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch &#x27;dev&#x27;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git tag -a v0.1 196a -m &quot;version 0.1 released&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签</li>
</ul>
<h2 id="14-操作标签"><a href="#14-操作标签" class="headerlink" title="14.操作标签"></a>14.操作标签</h2><p>删除标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git tag -d v0.1</span><br><span class="line">Deleted tag &#x27;v0.1&#x27; (was 63f1df9)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除</li>
</ul>
<p>推送标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:zhnny/git-learn.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一次性推送全部尚未推送到远程的本地标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git push origin --tags</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:zhnny/git-learn.git</span><br><span class="line"> * [new tag]         show -&gt; show</span><br><span class="line"> * [new tag]         v0.9 -&gt; v0.9</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>删除远程标签就麻烦一点，先从本地删除：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git tag -d show</span><br><span class="line">Deleted tag &#x27;show&#x27; (was afca374)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后，从远程删除。删除命令也是push，但是格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@LAPTOP-1UJN7PP7 git-learn]# git push origin :refs/tags/show</span><br><span class="line">To git@github.com:zhnny/git-learn.git</span><br><span class="line"> - [deleted]         show</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>上面这种操作的含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它(参考资料[3])</p>
</li>
<li><p>第二种更直观的删除远程标签的方式是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin --delete &lt;tagname&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="15-配置Git"><a href="#15-配置Git" class="headerlink" title="15.配置Git"></a>15.配置Git</h2><h3 id="15-1-配置全局信息"><a href="#15-1-配置全局信息" class="headerlink" title="15.1.配置全局信息"></a>15.1.配置全局信息</h3><p>配置用户信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>配置控制台回显颜色：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">git config --global color.ui <span class="literal">true</span></span></span><br></pre></td></tr></table></figure>

<h3 id="15-2-配置忽略文件"><a href="#15-2-配置忽略文件" class="headerlink" title="15.2.配置忽略文件"></a>15.2.配置忽略文件</h3><p>有些文件我们需要忽略，比如密码等配置文件、编译产生的中间文件等</p>
<p>忽略文件的原则是：</p>
<ul>
<li>忽略操作系统自动生成的文件，比如缩略图等</li>
<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件</li>
<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件</li>
</ul>
<p>Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件</p>
<p>不需要从头写<code>.gitignore</code>文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：</p>
<p><a href="https://github.com/github/gitignore">github&#x2F;gitignore: A collection of useful .gitignore templates</a></p>
<p>规则：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 排除所有.开头的隐藏文件:</span></span><br><span class="line">.*</span><br><span class="line"><span class="comment"># 排除所有.class文件:</span></span><br><span class="line">*.<span class="keyword">class</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不排除.gitignore和App.class:</span></span><br><span class="line">!.gitignore</span><br><span class="line">!App.<span class="keyword">class</span></span><br></pre></td></tr></table></figure>

<p>​    强制添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">git add -f App.class</span></span><br></pre></td></tr></table></figure>

<ul>
<li>值得注意的是，如果忽略了某个文件排除只能排除子文件下的，子文件夹的子文件下是不能排除的</li>
</ul>
<h3 id="15-3-配置别名"><a href="#15-3-配置别名" class="headerlink" title="15.3.配置别名"></a>15.3.配置别名</h3><p>配置Git命令的别名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">git config --global <span class="built_in">alias</span>.&lt;别名&gt;  &lt;命令名&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="16-参考资料"><a href="#16-参考资料" class="headerlink" title="16.参考资料"></a>16.参考资料</h2><p>[1]<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
<p>[2]<a href="https://www.yiibai.com/git/git_rebase.html">git rebase命令 - Git教程™ (yiibai.com)</a></p>
<p>[3]<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE">Git - 打标签 (git-scm.com)</a></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的快速使用</title>
    <url>/2022/03/09/Git%E7%9A%84%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-Git简介"><a href="#1-Git简介" class="headerlink" title="1. Git简介"></a>1. Git简介</h2><ul>
<li><p>Git最初是Linus花了两周时间自己用C写了一个分布式版本控制系统</p>
</li>
<li><p>特点：</p>
<ul>
<li>分布式，每一个主机都有完整版本库</li>
<li>开源免费性能好</li>
</ul>
<p>注：类似GitHub这种中心环境的存在是为了交换方便，换言之，即使不存在这种中心设备，Git也是可以正常使用的</p>
</li>
</ul>
<h2 id="2-Git安装"><a href="#2-Git安装" class="headerlink" title="2. Git安装"></a>2. Git安装</h2><p>笔者使用OS是CentOS Linux，Git的安装命令为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<h2 id="3-创建仓库"><a href="#3-创建仓库" class="headerlink" title="3. 创建仓库"></a>3. 创建仓库</h2><p>创建新文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir daily-scripts</span><br><span class="line">cd daily-scripts/</span><br></pre></td></tr></table></figure>

<p>初始化Git仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>添加文件到目录中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv ../POI聚类分析.ipynb POI聚类分析.ipynb </span><br></pre></td></tr></table></figure>

<p>添加文件到仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add POI聚类分析.ipynb</span><br></pre></td></tr></table></figure>

<p>添加文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add jupyter-note-book/</span><br></pre></td></tr></table></figure>

<p>添加多个文件（夹）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add jupyter-note-book/ python-file/</span><br></pre></td></tr></table></figure>

<p>注意：Git是不允许提交一个空的目录到版本库上的</p>
<p>提交文件到仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;Add a file POI聚类分析.ipynb&quot;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li><p>Git的工作流如图所示：</p>
<p><img src="https://s2.loli.net/2022/02/28/BDz5JSbxjw8AGTF.png" alt="img"></p>
<p>第一次add命令将改动添加到缓冲区，第二次的commit命令将改动添加到版本库中</p>
</li>
<li><p>- m “…” 表示此次提交的版本的描述信息</p>
</li>
</ul>
<h2 id="4-添加远程库"><a href="#4-添加远程库" class="headerlink" title="4. 添加远程库"></a>4. 添加远程库</h2><p>笔者在GitHub上创建了一个仓库daily-scripts</p>
<p>根据Github的提示，可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/zhnny/daily-scripts.git</span><br></pre></td></tr></table></figure>

<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>注意：第一次push的时候，提示输入用户名和密码，需要去GitHub的Settings中去生成Token</p>
<p>关于连接远程仓库使用的ssh key和Token，具体可参考博客[<a href="https://www.cnblogs.com/chenyablog/p/15397548.html">GitHub使用Personal access token</a>]</p>
<p>push完成后，GitHub中对应的repo中就有一个相同的仓库了</p>
<p>GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作</p>
<h2 id="5-克隆远程库"><a href="#5-克隆远程库" class="headerlink" title="5. 克隆远程库"></a>5. 克隆远程库</h2><p>克隆GitHub上的仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zhnny/PyTorch-Learning-Note.git</span><br></pre></td></tr></table></figure>

<p>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快</p>
<p>ssh协议需要设置公钥，https不需要，但是https在push时要Token</p>
<p>以下步骤将引导完成生成SSH密钥并将公钥添加到GitHub帐户（参考<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys">Checking for existing SSH keys - GitHub Docs</a>）</p>
<ul>
<li><p>cd到home目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否存在密钥（如果存在密钥可以上传）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls .ssh/</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成密钥(使用GitHub电子邮箱替换)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>接下来一直默认就好，除非你知道你在做什么</p>
</li>
<li><p>复制公钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat .ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure>
</li>
<li><p>将公钥粘贴到你的GitHub账户Settings中的SSH keys中</p>
<p><img src="https://s2.loli.net/2022/02/28/vXpe5N2LQUzYbHP.png" alt="image-20220228215435546"></p>
</li>
</ul>
<p>完成ssh key配置后就可以使用ssh协议克隆repo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:zhnny/PyTorch-Learning-Note.git</span><br></pre></td></tr></table></figure>

<p>push时也可以直接使用ssh协议</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push git@github.com:zhnny/PyTorch-Learning-Note.git</span><br></pre></td></tr></table></figure>

<p>而不必再使用Token</p>
<h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h2><p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys">Checking for existing SSH keys - GitHub Docs</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732792973664">从远程库克隆 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
<p><a href="https://www.cnblogs.com/chenyablog/p/15397548.html">GitHub使用Personal access token - 小旭2021 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo的GitHub Pages个人博客搭建</title>
    <url>/2022/03/09/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84GitHub%20Pages%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="1-创建一个个人主页仓库"><a href="#1-创建一个个人主页仓库" class="headerlink" title="1.创建一个个人主页仓库"></a>1.创建一个个人主页仓库</h2><p>仓库命名最好为<code>github账户名.github.io</code>，这样可以通过<code>https://github账户名.github.io</code>访问</p>
<p><img src="https://s2.loli.net/2022/03/06/5EZRBIJmxXNoViM.png" alt="image-20220306152739542"></p>
<h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h2><p>此处采用局部安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">npm install hexo</span></span><br></pre></td></tr></table></figure>



<h2 id="3-初始化Hexo"><a href="#3-初始化Hexo" class="headerlink" title="3.初始化Hexo"></a>3.初始化Hexo</h2><p>创建一个新的文件夹：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash"><span class="built_in">mkdir</span> blog</span></span><br></pre></td></tr></table></figure>

<p>初始化Hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">npx hexo init blog/</span></span><br></pre></td></tr></table></figure>

<p>进入文件夹并安装Hexo相关组件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash"><span class="built_in">cd</span> blog/</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">npm install</span></span><br></pre></td></tr></table></figure>



<h2 id="4-测试本地Hexo服务"><a href="#4-测试本地Hexo服务" class="headerlink" title="4.测试本地Hexo服务"></a>4.测试本地Hexo服务</h2><p>在本地运行Hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">npx hexo server</span></span><br></pre></td></tr></table></figure>

<p>浏览器访问<code>http://localhost:4000</code>，出现以下界面即为启动成功：</p>
<p><img src="https://s2.loli.net/2022/03/06/lnfAWDyKOpwUg1s.png" alt="image-20220306154058992"></p>
<h2 id="5-部署到GitHub"><a href="#5-部署到GitHub" class="headerlink" title="5.部署到GitHub"></a>5.部署到GitHub</h2><p>安装Git部署工具：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure>

<p>修改<code> _config.yml</code>文件末尾的 Deployment 部分，修改成如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>使用以下命令进行部署：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">npx hexo deploy</span></span><br></pre></td></tr></table></figure>



<h2 id="6-在GitHub设置Page"><a href="#6-在GitHub设置Page" class="headerlink" title="6.在GitHub设置Page"></a>6.在GitHub设置Page</h2><p>打开刚才创建的仓库可以看到已经添加了一些文件：</p>
<p><img src="https://s2.loli.net/2022/03/06/NIkXl3ZCqKQoLyH.png" alt="image-20220306155326068"></p>
<p>在<code>Settings</code>里的<code>Pages</code>选项中将<code>source</code>设置为<code>master</code>（笔者在推送后GitHub已经自动设置为GitHub Pages）：</p>
<p><img src="https://s2.loli.net/2022/03/06/v3H7kGxy9ntwAWE.png" alt="image-20220306155511038"></p>
<p>最后在浏览器里访问<code>https://github账户名.github.io</code>，出现如下结果即为部署成功：</p>
<p><img src="https://s2.loli.net/2022/03/06/mvJCetqU4ElPisk.png" alt="image-20220306155832968"></p>
<h2 id="7-信息修改（可选）"><a href="#7-信息修改（可选）" class="headerlink" title="7.信息修改（可选）"></a>7.信息修改（可选）</h2><p>修改<code> _config.yml</code>文件中的一些信息，包括网站信息、作者信息等</p>
<h2 id="8-安装主题（可选）"><a href="#8-安装主题（可选）" class="headerlink" title="8.安装主题（可选）"></a>8.安装主题（可选）</h2><p>笔者使用的是<code>Next</code>主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>

<p>修改<code> _config.yml</code>文件中的<code>theme</code>信息:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>



<h2 id="9-安装插件（可选）"><a href="#9-安装插件（可选）" class="headerlink" title="9.安装插件（可选）"></a>9.安装插件（可选）</h2><h3 id="9-1-本地搜索插件"><a href="#9-1-本地搜索插件" class="headerlink" title="9.1.本地搜索插件"></a>9.1.本地搜索插件</h3><p>添加本地搜索插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">npm install hexo-generator-searchdb --save</span></span><br></pre></td></tr></table></figure>

<p>编辑 <strong>站点配置文件</strong>（网站的<code>_config.yml</code>），新增以下内容到任意位置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>编辑 <strong>主题配置文件</strong>（主题的<code>_config.yml</code>），启用本地搜索功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h3 id="9-2-MathJax数学公式"><a href="#9-2-MathJax数学公式" class="headerlink" title="9.2.MathJax数学公式"></a>9.2.MathJax数学公式</h3><p>编辑 <strong>主题配置文件</strong>主题的<code>_config.yml</code>）， 将 <code>mathjax</code> 下的 <code>enable</code> 设定为 <code>true</code> 即可。 <code>cdn</code> 用于指定 MathJax 的脚本地址，默认是 MathJax 官方提供的 CDN 地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></span><br></pre></td></tr></table></figure>



<h3 id="9-3-字数统计与阅读时间"><a href="#9-3-字数统计与阅读时间" class="headerlink" title="9.3.字数统计与阅读时间"></a>9.3.字数统计与阅读时间</h3><p>安装统计插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">npm install hexo-wordcount --save</span></span><br></pre></td></tr></table></figure>

<p>在主题配置<code>_config.yml</code>里修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">totalcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="10-修改主题样式（可选）"><a href="#10-修改主题样式（可选）" class="headerlink" title="10.修改主题样式（可选）"></a>10.修改主题样式（可选）</h2><p>修改<code>theme</code>下对于主题下的<code> _config.yml</code>文件中的一些信息以定制样式</p>
<h2 id="11-参考资料"><a href="#11-参考资料" class="headerlink" title="11.参考资料"></a>11.参考资料</h2><p><a href="https://pages.github.com/">GitHub Pages | Websites for you and your projects, hosted directly from your GitHub repository. Just edit, push, and your changes are live.</a></p>
<p><a href="https://hexo.io/docs/">Documentation | Hexo</a></p>
<p><a href="http://theme-next.iissnan.com/">NexT 使用文档 (iissnan.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/424930588">Next主题设置 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NEXT</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
